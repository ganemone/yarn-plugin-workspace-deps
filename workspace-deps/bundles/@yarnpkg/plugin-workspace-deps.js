/* eslint-disable */
module.exports = {
name: "@yarnpkg/plugin-workspace-deps",
factory: function (require) {
var plugin;plugin=(()=>{"use strict";var e={47:(e,t,r)=>{r.r(t),r.d(t,{default:()=>p});const o=require("@yarnpkg/fslib"),s=require("util"),a=require("fs"),n=(0,s.promisify)(a.writeFile),i=(0,s.promisify)(a.readFile),d=(0,s.promisify)(a.exists),p={hooks:{afterAllInstalled:async(e,t)=>{const{report:r}=t;function s(t){const r=e.storedPackages.get(e.storedResolutions.get(t.descriptorHash));return`${r.scope?`@${r.scope}/${r.name}`:r.name}:${r.version}`}await r.startTimerPromise("Generating workspace-deps.txt",async()=>{await Promise.all(e.workspaces.map(async r=>{const a=new Set;for(const[e,t]of r.dependencies)a.add(t);for(const t of a){const r=e.workspacesByIdent.get(t.identHash),o=e.storedResolutions.get(t.descriptorHash),s=e.storedPackages.get(o);for(const[e,t]of s.dependencies)r&&r.manifest.devDependencies.has(e)||a.add(t)}const p="// @generated\n"+Array.from(new Set(Array.from(a).map(s).sort())).join("\n"),c=o.ppath.join(r.cwd,"workspace-deps.txt");if(t.immutable){if(!await d(c))throw new Error(`Need to create workspace-deps.txt file for ${r.cwd}, but --immutable flag was passed`);if(await i(c,"utf-8")!==p)throw new Error(`Workspace ${r.cwd} needs to update workspace-deps.txt file, but --immutable flag was passed`)}await n(c,p)}))})}}}}},t={};function r(o){if(t[o])return t[o].exports;var s=t[o]={exports:{}};return e[o](s,s.exports,r),s.exports}return r.d=(e,t)=>{for(var o in t)r.o(t,o)&&!r.o(e,o)&&Object.defineProperty(e,o,{enumerable:!0,get:t[o]})},r.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),r.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r(47)})();
return plugin;
}
};